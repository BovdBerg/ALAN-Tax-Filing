users
	anonymous

interfaces

root {
	'Management': group {
		'Discount periods': collection ['Period'] {
			'Period': text
			'Percentage' : number 'percent'
			'Minimal spendings': number 'eurocent'
		}

		'VAT percentage': number 'percent'

		'Beverages types': collection ['Beverage type'] {
			'Beverage type': text
		}

		'Tables': collection ['Table number'] {
			'Table number': text
			'Seatings': number 'chairs'
			'Orders': reference-set -> downstream ^ ^ .'Orders'* .'Order type'?'In-house' = inverse >'Table'
			'Number of orders': number 'units' = count <'Orders'*
			'Total order value': number 'eurocent' = downstream sum <'Orders'* ^ .'Total'
		}
	}

	'Menu': collection ['Item name'] {
		'Item name': text
		'Selling price': number 'eurocent'
		'Item type': stategroup (
			'Dish' {
				'Dish type': stategroup (
					'Appetizer' { }
					'Main course' { }
					'Dessert' { }
				)
			}
			'Beverage' {
				'Beverage type': text -> ^ ^ .'Management' .'Beverages types'[]
			}
		)
	}

	'Orders': collection ['Order'] {
		'Order': text
		'Order type': stategroup (
			'Takeaway' { }
			'In-house' {
				'Table': text -> ^ ^ .'Management' .'Tables'[] -< 'Orders'
			}
		)
		'Order lines': collection ['Order line'] {
			'Order line': text
			'Item': text -> ^ ^ .'Menu'[]
			'Amount': number 'units'
			'Line total': number 'eurocent' = product (
				.'Amount' as 'units',
				>'Item'.'Selling price'
			)
		}
		'Subtotal': number 'eurocent' = sum .'Order lines'* .'Line total'
		'Discount applicable': stategroup (
			'Yes' {
				'Discount period': text -> ^ ^ .'Management' .'Discount periods'[]
				'Discount': number 'eurocent' = switch ^ .'Subtotal' compare ( >'Discount period' .'Minimal spendings' ) (
					| < => 0
					| >= => product (
						from 'percent' >'Discount period' .'Percentage' as 'fraction',
						^ .'Subtotal'
					)
				)
				'Total': number 'eurocent' = sum ( ^ .'Subtotal' , - .'Discount' )
			}
			'No' { }
		)
		'Total': number 'eurocent' = switch .'Discount applicable' (
			|'Yes' as $'discount' => $'discount'.'Total'
			|'No' => .'Subtotal'
		)
		'VAT': number 'eurocent' = product (
			from 'percent' ^ .'Management' .'VAT percentage' as 'fraction' ,
			.'Total'
		)
	}
}

numerical-types
	'eurocent'
	= 'units' * 'eurocent'
	= 'fraction' * 'eurocent'
		@numerical-type: (
			label: "Euro"
			decimals: 2
		)
	'chairs'
	'units'
	'percent'
	'fraction'
	= 'percent' / 1 * 10 ^ 2
